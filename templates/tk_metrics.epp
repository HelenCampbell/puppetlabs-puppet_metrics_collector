<%- | String        $output_dir,
      Array[String] $hosts,
      String        $metrics_type,
      Integer       $metrics_port,
      Array[Hash]   $additional_metrics,
| -%>
#!/opt/puppetlabs/puppet/bin/ruby

require "net/https"
require "json"
require "uri"
require 'time'
require 'optparse'

METRICS_TYPE = "<%= $metrics_type %>"

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: #{METRICS_TYPE}_metrics [options]"

  opts.on('-p', '--print', 'Print to stdout') { |v| options[:print] = true }
end.parse!

OUTPUT_DIR = "<%= $output_dir %>"

HOSTS = [
<% $hosts.each |$host| { -%>
  "<%= $host %>",
<% } -%>
]
PORT = "<%= $metrics_port %>"

METRICS = [ <% $additional_metrics.each | $metric | { %>
  { 'name' => '<%= $metric['name'] %>',
    'url' => '<%= $metric['url'] %>' },
<%- } -%>
]
$error_array = []

def get_endpoint(url)
  uri  = URI.parse(url)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  http.cert = OpenSSL::X509::Certificate.new(File.read('/etc/puppetlabs/puppet/ssl/certs/<%= $::clientcert %>.pem'))
  http.key  = OpenSSL::PKey::RSA.new(File.read('/etc/puppetlabs/puppet/ssl/private_keys/<%= $::clientcert %>.pem'))
  http.ca_file = '/etc/puppetlabs/puppet/ssl/certs/ca.pem'
  http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  data = JSON.parse(http.get(uri.request_uri).body)
rescue Exception => e
    $error_array << "#{e}"
    data = {}
end

filename = Time.now.utc.strftime('%Y%m%dT%H%M%SZ') + '.json'

HOSTS.each do |host|
  begin
    timestamp = Time.now
    dataset = {'timestamp' => timestamp.utc.iso8601, 'servers' => {}}
    hostkey = host.gsub('.', '-')

    host_url = "https://#{host}:#{PORT}"

    status_endpoint = "#{host_url}/status/v1/services?level=debug"
    status_output   = get_endpoint(status_endpoint)
    dataset['servers'][hostkey] = {METRICS_TYPE => status_output}

    METRICS.each do |metric|
      endpoint = "#{host_url}/metrics/v1/mbeans/#{metric['url']}"
      dataset['servers'][hostkey][METRICS_TYPE][metric['name']] = get_endpoint(endpoint)
    end

    dataset['servers'][hostkey][METRICS_TYPE]['error'] = $error_array
    dataset['servers'][hostkey][METRICS_TYPE]['error_count'] = $error_array.count
    dataset['servers'][hostkey][METRICS_TYPE]['api-query-start'] = timestamp.utc.iso8601
    dataset['servers'][hostkey][METRICS_TYPE]['api-query-duration'] = Time.now - timestamp

    json_dataset = JSON.pretty_generate(dataset)

    Dir.chdir(OUTPUT_DIR) do
      Dir.mkdir(host) unless File.exist?(host)
      File.open(File.join(host, filename), 'w') do |file|
        file.write(json_dataset)
      end
    end
    if options[:print] == true then
      STDOUT.write(json_dataset)
    end
  end
end
