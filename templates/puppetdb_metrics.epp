<%- | String        $output_dir,
      Array[String] $hosts,
| -%>
#!/opt/puppetlabs/puppet/bin/ruby

require "net/https"
require "json"
require "uri"
require 'time'

OUTPUT_DIR = "<%= $output_dir %>"

HOSTS = [
<% $hosts.each |$host| { -%>
  "<%= $host %>",
<% } -%>
]

METRICS = [
  { 'name' => 'commands_queue',
    'url'  => 'org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=puppetlabs.puppetdb.commands' },
  { 'name' => 'catalog_hash_miss',
    'url'  => 'puppetlabs.puppetdb.storage%3Aname%3Dcatalog-hash-miss-time' },
  { 'name' => 'catalog_hash_match',
    'url'  => 'puppetlabs.puppetdb.storage%3Aname%3Dcatalog-hash-match-time' },
  { 'name' => 'replace_catalog_time',
    'url'  => 'puppetlabs.puppetdb.storage%3Aname%3Dreplace-catalog-time' },
  { 'name' => 'replace_facts_time',
    'url'  => 'puppetlabs.puppetdb.storage%3Aname%3Dreplace-facts-time' },
  { 'name' => 'store_report_time',
    'url'  => 'puppetlabs.puppetdb.storage%3Aname%3Dstore-report-time' },
  { 'name' => 'global_retried',
    'url'  => 'puppetlabs.puppetdb.mq%3Aname%3Dglobal.retried' },
  { 'name' => 'global_retry_counts',
    'url'  => 'puppetlabs.puppetdb.mq%3Aname%3Dglobal.retry-counts' },
  { 'name' => 'global_retry_persistence_time',
    'url'  => 'puppetlabs.puppetdb.mq%3Aname%3Dglobal.retry-persistence-time' },
<% if versioncmp($::pe_server_version, '2016.4.0') >= 0 { -%>
  { 'name' => 'replace_catalog_retried',
    'url'  => 'puppetlabs.puppetdb.mq%3Aname%3Dreplace+catalog.9.retried' },
  { 'name' => 'replace_catalog_retry_counts',
    'url'  => 'puppetlabs.puppetdb.mq%3Aname%3Dreplace+catalog.9.retry-counts' },
  { 'name' => 'replace_catalog_retry_persistence_time',
    'url'  => 'puppetlabs.puppetdb.mq%3Aname%3Dreplace+catalog.9.retry-persistence-time' },
  { 'name' => 'replace_facts_retried',
    'url'  => 'puppetlabs.puppetdb.mq%3Aname%3Dreplace+facts.5.retried' },
  { 'name' => 'replace_facts_retry_counts',
    'url'  => 'puppetlabs.puppetdb.mq%3Aname%3Dreplace+facts.5.retry-counts' },
  { 'name' => 'replace_facts_retry_persistence_time',
    'url'  => 'puppetlabs.puppetdb.mq%3Aname%3Dreplace+facts.5.retry-persistence-time' },
  { 'name' => 'store_report_retried',
    'url'  => 'puppetlabs.puppetdb.mq%3Aname%3Dstore+report.8.retried' },
  { 'name' => 'store_reports_retry_counts',
    'url'  => 'puppetlabs.puppetdb.mq%3Aname%3Dstore+report.8.retry-counts' },
  { 'name' => 'store_report_retry_persistence_time',
    'url'  => 'puppetlabs.puppetdb.mq%3Aname%3Dstore+report.8.retry-persistence-time' },
<% } -%>
]

$error_array = []

def get_endpoint(url)
  uri  = URI.parse(url)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  http.cert = OpenSSL::X509::Certificate.new(File.read('/etc/puppetlabs/puppet/ssl/certs/<%= $::clientcert %>.pem'))
  http.key  = OpenSSL::PKey::RSA.new(File.read('/etc/puppetlabs/puppet/ssl/private_keys/<%= $::clientcert %>.pem'))
  http.ca_file = '/etc/puppetlabs/puppet/ssl/certs/ca.pem'
  http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  data = JSON.parse(http.get(uri.request_uri).body)
  data = data.merge({"error" => "", "error_count" => 0})
rescue Exception => e
    $error_array << "#{e}"
    data = {}
end

filename = Time.now.utc.strftime('%Y%m%dT%H%M%SZ') + '.json'

HOSTS.each do |host|
  begin
    timestamp = Time.now
    dataset = {'timestamp' => timestamp.utc.iso8601, 'servers' => {}}
    hostkey = host.gsub('.', '-')
    dataset['servers'][hostkey] = {'puppetdb' => {}}
    dataset['servers'][hostkey]['puppetdb']['api-query-start'] = timestamp.utc.iso8601

    METRICS.each do |metric|
      endpoint = "https://#{host}:8081/metrics/v1/mbeans/#{metric['url']}"
      dataset['servers'][hostkey]['puppetdb'][metric['name']] = get_endpoint(endpoint)
    end

    dataset['servers'][hostkey]['puppetdb']['error'] = $error_array
    dataset['servers'][hostkey]['puppetdb']['error_count'] = $error_array.count
    dataset['servers'][hostkey]['puppetdb']['api-query-duration'] = Time.now - timestamp

    Dir.chdir(OUTPUT_DIR) do
      Dir.mkdir(host) unless File.exist?(host)
      File.open(File.join(host, filename), 'w') do |file|
        file.write(JSON.pretty_generate(dataset))
      end
    end
  end
end
